<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>직원 관리 정보</title>
    <link rel="stylesheet" href="styles.css">
    <!-- Supabase JS 라이브러리 -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <!-- 사용자 정의 Supabase 스크립트 -->
    <script src="supabase.js"></script>
  </head>
  <body>
    <!-- 로딩 오버레이 -->
    <div id="loadingOverlay">
      <div class="loader"></div>
      <div>데이터를 처리중입니다...</div>
    </div>

    <div class="container">
      <!-- 헤더 부분 -->
      <div class="header" id="headerSection">
        <div class="title" id="pageTitle">우리집 데이케어 센터 관리자모드_PW부여</div>
      </div>

      <div class="content-wrapper" id="contentArea">
        <div class="employee-list" id="employeeListContainer">
          <h3 class="employee-list-title" id="employeeListTitle">직원 목록</h3>
          <div class="table-container">
            <table id="employeeTable">
              <thead>
                <tr>
                  <th>직원번호</th>
                  <th>직원명</th>
                  <th>휴대전화번호</th>
                  <th>생년월일</th>
                  <th>입소일</th>
                  <th>퇴소일</th>
                </tr>
              </thead>
              <tbody id="employeeTableBody">
                <!-- 데이터는 JavaScript로 동적 생성 -->
              </tbody>
            </table>
          </div>
        </div>
      
        <div class="employee-form" id="employeeFormContainer">
          
        </div>
      </div>
    </div>

    <!-- 모달 컴포넌트 -->
    <div class="modal-overlay" id="customModal">
      <div class="modal-container">
        <div class="modal-header">
          <div class="modal-title">알림</div>
          <div class="modal-close">&times;</div>
        </div>
        <div class="modal-body" id="modalMessage">
          <!-- 메시지 내용이 여기에 들어갑니다 -->
        </div>
        <div class="modal-footer">
          <button class="modal-btn" id="modalConfirmBtn">확인</button>
        </div>
      </div>
    </div>

    <!-- 확인 모달 -->
    <div class="modal-overlay" id="confirmModal">
      <div class="modal-container">
        <div class="modal-header">
          <div class="modal-title">확인</div>
          <div class="modal-close">&times;</div>
        </div>
        <div class="modal-body" id="confirmModalMessage">
          <!-- 메시지 내용이 여기에 들어갑니다 -->
        </div>
        <div class="modal-footer">
          <button class="modal-btn" id="confirmYesBtn">확인</button>
          <button class="modal-btn cancel-btn" id="confirmNoBtn">취소</button>
        </div>
      </div>
    </div>

    <script>

      // 모달 관련 전역 함수
      function showModal(message) {
        const modalMessage = document.getElementById("modalMessage");
        const customModal = document.getElementById("customModal");
        if (modalMessage) modalMessage.textContent = message;
        if (customModal) customModal.style.display = "flex";
      }

      function closeModal() {
        const customModal = document.getElementById("customModal");
        const confirmModal = document.getElementById("confirmModal");
        if (customModal) customModal.style.display = "none";
        if (confirmModal) confirmModal.style.display = "none";
      }

      // 확인 모달 관련 함수
      function showConfirmModal(message) {
        return new Promise((resolve) => {
          const confirmModal = document.getElementById("confirmModal");
          const confirmMessage = document.getElementById("confirmModalMessage");
          const yesBtn = document.getElementById("confirmYesBtn");
          const noBtn = document.getElementById("confirmNoBtn");
          const closeBtn = confirmModal.querySelector(".modal-close");

          // 메시지 설정
          if (confirmMessage) {
            confirmMessage.textContent = message;
          }

          // 모달 표시
          if (confirmModal) {
            confirmModal.style.display = "flex";
          }

          // 이벤트 리스너 설정
          function handleYes() {
            if (confirmModal) {
              confirmModal.style.display = "none";
            }
            cleanup();
            resolve(true);
          }

          function handleNo() {
            if (confirmModal) {
              confirmModal.style.display = "none";
            }
            cleanup();
            resolve(false);
          }

          function cleanup() {
            if (yesBtn) {
              yesBtn.removeEventListener("click", handleYes);
            }
            if (noBtn) {
              noBtn.removeEventListener("click", handleNo);
            }
            if (closeBtn) {
              closeBtn.removeEventListener("click", handleNo);
            }
          }

          // 이벤트 리스너 추가
          if (yesBtn) {
            yesBtn.addEventListener("click", handleYes);
          }
          if (noBtn) {
            noBtn.addEventListener("click", handleNo);
          }
          if (closeBtn) {
            closeBtn.addEventListener("click", handleNo);
          }
        });
      }

      // alert 대신 모달을 사용하는 함수
      function showAlert(message) {
        showModal(message);
      }
      
      // 로딩 표시 함수
      function showLoading() {
        document.getElementById("loadingOverlay").style.display = "flex";
      }

      // 로딩 숨기기 함수
      function hideLoading() {
        document.getElementById("loadingOverlay").style.display = "none";
      }
      
      // 1. 함수 정의 부분 (위쪽에 배치)

      // (구분)모든 입력 필드를 초기화하는 함수
      function allClearContents() {
        // 기본 정보 입력 필드 초기화
        document.getElementById("employeeId").value = "";
        document.getElementById("name").value = "";
        document.getElementById("careNumber").value = "";
        document.getElementById("ssn").value = "";
        document.getElementById("birthdate").value = "";
        document.getElementById("age").value = "";
        document.getElementById("admissionDate").value = "";
        document.getElementById("dischargeDate").value = "";
        document.getElementById("address").value = "";
        document.getElementById("mobile").value = "";
        document.getElementById("emergencyContact").value = "";
        document.getElementById("email").value = "";
        document.getElementById("medications").value = "";
        document.getElementById("allergies").value = "";
        document.getElementById("hospital").value = "";
        document.getElementById("medicalHistory").value = "";
        document.getElementById("guardianRelation").value = "선택";
        document.getElementById("guardianName").value = "";
        document.getElementById("guardianContact").value = "";
        document.getElementById("livingWith").value = "선택";
        document.getElementById("livingWithName").value = "";
        document.getElementById("livingWithContact").value = "";
        document.getElementById("employeeNeeds").value = "";
        document.getElementById("guardianNeeds").value = "";
        document.getElementById("dailyRoutine").value = "";
        
        // generatedId 초기화 추가
        document.getElementById("generatedId").value = "";
        
        // 전역변수 초기화
        selectedemployeeId = "";
        
        // 버튼 상태 초기화
        document.getElementById("submitBtn").disabled = false;
        document.getElementById("editBtn").disabled = true;
        document.getElementById("deleteBtn").disabled = true;
      }

      // (구분)8자리 숫자인지 확인하는 함수
      function date8numberCheck(value) {
        // 값이 비어있으면 유효한 것으로 처리 (필수 입력이 아닌 경우)
        if (value === "") {
          return true;
        }

        // 8자리 숫자인지 확인 (정규식 사용)
        const regex = /^\d{8}$/;
        return regex.test(value);
      }

      // (구분)만 나이 계산 함수
      function manAge(birthDateStr) {
        // 입력값이 비어있거나 유효하지 않은 경우
        if (!birthDateStr || !date8numberCheck(birthDateStr)) {
          return "";
        }

        // 생년월일 파싱 (YYYYMMDD 형식)
        const year = parseInt(birthDateStr.substring(0, 4));
        const month = parseInt(birthDateStr.substring(4, 6));
        const day = parseInt(birthDateStr.substring(6, 8));

        // 유효한 날짜인지 확인
        const birthDate = new Date(year, month - 1, day); // 자바스크립트의 월은 0부터 시작
        if (
          birthDate.getFullYear() !== year ||
          birthDate.getMonth() !== month - 1 ||
          birthDate.getDate() !== day
        ) {
          return ""; // 유효하지 않은 날짜
        }

        // 현재 날짜
        const today = new Date();

        // 만 나이 계산
        let age = today.getFullYear() - birthDate.getFullYear();

        // 생일이 아직 지나지 않았는지 확인
        const isBirthdayPassed =
          today.getMonth() > birthDate.getMonth() ||
          (today.getMonth() === birthDate.getMonth() &&
            today.getDate() >= birthDate.getDate());

        // 생일이 아직 지나지 않았으면 1살 빼기
        if (!isBirthdayPassed) {
          age--;
        }

        return age.toString();
      }

      // (구분)주민등록번호가 13자리 숫자인지 확인하는 함수
      function idNumberCheck(value) {
        // 값이 비어있으면 유효한 것으로 처리 (필수 입력이 아닌 경우)
        if (value === "") {
          return true;
        }

        // 하이픈 제거
        const cleanValue = value.replace(/-/g, "");

        // 13자리 숫자인지 확인 (정규식 사용)
        const regex = /^\d{13}$/;
        return regex.test(cleanValue);
      }

      // (구분)주민등록번호를 000000-0000000 형식으로 변경하는 함수
      function idNumberChange(value) {
        // 값이 비어있으면 그대로 반환
        if (value === "") {
          return "";
        }

        // 하이픈 제거
        const cleanValue = value.replace(/-/g, "");

        // 13자리 숫자가 아니면 그대로 반환
        if (!/^\d{13}$/.test(cleanValue)) {
          return value;
        }

        // 000000-0000000 형식으로 변환
        return cleanValue.substring(0, 6) + "-" + cleanValue.substring(6);
      }

      // (구분)주민등록번호가 000000-0000000 형식인지 확인하는 함수
      function idNumberDoubleCheck(value) {
        // 값이 비어있으면 유효한 것으로 처리 (필수 입력이 아닌 경우)
        if (value === "") {
          return true;
        }

        // 000000-0000000 형식인지 확인 (정규식 사용)
        const regex = /^\d{6}-\d{7}$/;
        return regex.test(value);
      }

      // (구분)이메일 주소 형식 확인 함수
      function emailFormatCheck(email) {
        // 값이 비어있으면 유효한 것으로 처리 (필수 입력이 아닌 경우)
        if (email === "") {
          return true;
        }

        // 이메일 형식 정규식 (RFC 5322 표준에 기반)
        const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        return regex.test(email);
      }

      // (구분)전화번호가 11자리 이하 숫자인지 확인하는 함수
      function phoneNumberCheck(value) {
        // 값이 비어있으면 유효한 것으로 처리 (필수 입력이 아닌 경우)
        if (value === "") {
          return true;
        }

        // 하이픈 제거
        const cleanValue = value.replace(/-/g, "");

        // 숫자만 남아있는지 확인
        const isNumeric = /^\d+$/.test(cleanValue);

        // 11자리 이하 숫자인지 확인
        return isNumeric && cleanValue.length <= 11;
      }

      // (구분)전화번호를 형식에 맞게 변환하는 함수
      function phoneNumberChange(value) {
        // 값이 비어있으면 그대로 반환
        if (value === "") {
          return "";
        }

        // 하이픈 제거하고 숫자만 추출
        const cleanValue = value.replace(/-/g, "").replace(/[^\d]/g, "");

        // 전화번호 길이에 따라 포맷 적용
        if (cleanValue.length === 8) {
          // 지역번호 없는 8자리 번호 (예: 국번-국번-번호)
          return cleanValue.substring(0, 4) + "-" + cleanValue.substring(4);
        } else if (cleanValue.length === 9) {
          // 서울 지역번호(02)가 포함된 전화번호
          if (cleanValue.startsWith("02")) {
            return (
              cleanValue.substring(0, 2) +
              "-" +
              cleanValue.substring(2, 5) +
              "-" +
              cleanValue.substring(5)
            );
          } else {
            // 기타 9자리 번호
            return (
              cleanValue.substring(0, 3) +
              "-" +
              cleanValue.substring(3, 6) +
              "-" +
              cleanValue.substring(6)
            );
          }
        } else if (cleanValue.length === 10) {
          // 서울 지역번호(02)가 포함된 전화번호
          if (cleanValue.startsWith("02")) {
            return (
              cleanValue.substring(0, 2) +
              "-" +
              cleanValue.substring(2, 6) +
              "-" +
              cleanValue.substring(6)
            );
          } else {
            // 기타 지역번호나 휴대폰 번호 (3-3-4)
            return (
              cleanValue.substring(0, 3) +
              "-" +
              cleanValue.substring(3, 6) +
              "-" +
              cleanValue.substring(6)
            );
          }
        } else if (cleanValue.length === 11) {
          // 휴대폰 번호 (3-4-4)
          return (
            cleanValue.substring(0, 3) +
            "-" +
            cleanValue.substring(3, 7) +
            "-" +
            cleanValue.substring(7)
          );
        } else {
          // 기타 길이는 그대로 반환
          return cleanValue;
        }
      }

      // (구분)전화번호 형식이 올바른지 최종 확인하는 함수
      function phoneNumberDoubleCheck(value) {
        // 값이 비어있으면 유효한 것으로 처리 (필수 입력이 아닌 경우)
        if (value === "") {
          return true;
        }

        // 일반적인 전화번호 형식 패턴 (다양한 패턴 포함)
        // 1. 휴대폰: 010-XXXX-XXXX, 011-XXX-XXXX 등
        // 2. 서울 지역번호: 02-XXX-XXXX, 02-XXXX-XXXX
        // 3. 지방 지역번호: 03X-XXX-XXXX, 04X-XXX-XXXX, 05X-XXX-XXXX 등
        // 4. 인터넷 전화: 070-XXXX-XXXX
        // 5. 기타 8자리: XXXX-XXXX
        const regex =
          /^(01[0-9]{1}-\d{3,4}-\d{4}|02-\d{3,4}-\d{4}|0[3-9]{1}[0-9]{1}-\d{3}-\d{4}|070-\d{4}-\d{4}|\d{4}-\d{4})$/;
        return regex.test(value);
      }

      // (구분)교육 통계 업데이트 함수
      function updateEducationStatistics() {
        const educationTable = document.getElementById("educationList");
        const rows = educationTable.querySelectorAll("tr");

        let totalCount = rows.length;
        let pendingCount = 0;

        // 각 행을 순회하면서 미이수교육 수 계산
        rows.forEach((row) => {
          const completionDate = row
            .querySelector("td:nth-child(5)")
            .textContent.trim();

          if (!completionDate) {
            pendingCount++;
          }
        });

        // 통계 표시 업데이트
        const pendingElement = document.querySelector(".pending-education");
        const totalElement = document.querySelector(".total-education");

        if (pendingElement && totalElement) {
          pendingElement.textContent = `미이수교육 ${pendingCount}건`;
          totalElement.textContent = `대상교육 ${totalCount}건`;
        }
      }

      // (구분)새로운 직원번호 생성 함수 - 서버가 아닌 클라이언트 측에서 임시 생성용
      function generateNewemployeeId() {
        // 현재 연도의 마지막 두 자리 가져오기
        const currentYear = new Date().getFullYear().toString().slice(-2);

        // 직원번호 형식 M + YY + 001~999
        const prefix = "M" + currentYear;

        // 기존 직원번호 중 현재 연도의 것을 필터링
        const existingIds = [];

        if (storedData_all && storedData_all.length > 0) {
          storedData_all.forEach((row) => {
            const employeeId = row[1]; // 배열[1]에 직원번호 저장
            if (employeeId && employeeId.startsWith(prefix)) {
              existingIds.push(employeeId);
            }
          });
        }

        // 가장 큰 번호 찾기
        let maxNumber = 0;
        existingIds.forEach((id) => {
          // prefix(MYY) 이후의 숫자 부분 추출
          const numberPart = parseInt(id.substring(3), 10);
          if (!isNaN(numberPart) && numberPart > maxNumber) {
            maxNumber = numberPart;
          }
        });

        // 다음 번호 생성 (3자리 숫자로 패딩)
        const nextNumber = (maxNumber + 1).toString().padStart(3, "0");

        return prefix + nextNumber;
      }

      // (구분)2. 이벤트 리스너 및 초기화 코드 (아래쪽에 배치)
      document.addEventListener("DOMContentLoaded", function () {
        
        initializeSupabase();
        // 페이지 로드 시 데이터 로드 및 테이블 표시
        initializeData();

        // 수정/삭제 버튼 초기 비활성화, 입력 버튼 활성화
        document.getElementById("editBtn").disabled = true;
        document.getElementById("deleteBtn").disabled = true;
        document.getElementById("submitBtn").disabled = false;

        // 모달 요소들 가져오기
        const customModal = document.getElementById("customModal");
        const modalClose = document.querySelector(".modal-close");
        const modalConfirmBtn = document.getElementById("modalConfirmBtn");

        // 모달 닫기 이벤트 리스너 설정
        if (modalClose) {
          modalClose.addEventListener("click", function () {
            closeModal();
          });
        }

        if (modalConfirmBtn) {
          modalConfirmBtn.addEventListener("click", function () {
            closeModal();
          });
        }

        // 등록직원 조회 버튼 클릭 이벤트
        const activeemployeeBtn = document.getElementById("activeemployeeBtn");
        if (activeemployeeBtn) {
          activeemployeeBtn.addEventListener("click", function () {
            // 현재 등록 중인 직원만 표시
            table_Currentemployee();

            // 폼 초기화
            allClearContents();

            // 버튼 상태 설정 - 입력 버튼과 초기화 버튼 활성화, 수정/삭제 버튼 비활성화
            document.getElementById("submitBtn").disabled = false;
            document.getElementById("resetBtn").disabled = false;
            document.getElementById("editBtn").disabled = true;
            document.getElementById("deleteBtn").disabled = true;
          });
        }

        // 전체직원 조회 버튼 클릭 이벤트
        const allemployeeBtn = document.getElementById("allemployeeBtn");
        if (allemployeeBtn) {
          allemployeeBtn.addEventListener("click", function () {
            // 이미 로드된 데이터를 사용하여 테이블 표시
            table_allemployee();

            // 폼 초기화
            allClearContents();

            // 버튼 상태 설정 - 입력 버튼과 초기화 버튼 활성화, 수정/삭제 버튼 비활성화
            document.getElementById("submitBtn").disabled = false;
            document.getElementById("resetBtn").disabled = false;
            document.getElementById("editBtn").disabled = true;
            document.getElementById("deleteBtn").disabled = true;
          });
        }

        // 삭제 버튼 이벤트 리스너
        document
          .getElementById("deleteBtn")
          .addEventListener("click", async function () {
            // generatedId 확인
            const generatedId = document.getElementById("generatedId").value;
            if (!generatedId) {
              showAlert("선택된 직원이 없습니다.");
              return;
            }

            // 사용자 확인 (모달 사용)
            const confirmed = await showConfirmModal(
              "선택한 직원 정보를 정말 삭제하시겠습니까?\n삭제된 데이터는 관리자만 복구할 수 있습니다."
            );

            if (!confirmed) {
              return;
            }

            try {
              showLoading(); // 로딩 표시 시작

              // move_employeeLine 함수 호출
              const result = await move_employeeLine(generatedId);
              
              if (result.success) {
                // 데이터 이동 성공
                showAlert("직원 정보가 삭제되었습니다.");
                
                // 전체 데이터 다시 로드
                await loadAllData();
                
                // 현재 직원 테이블 업데이트
                table_Currentemployee();
                
                // 폼 초기화
                allClearContents();
                
                // 버튼 상태 업데이트
                document.getElementById("editBtn").disabled = true;
                document.getElementById("deleteBtn").disabled = true;
                document.getElementById("submitBtn").disabled = false;
              } else {
                showAlert("삭제 중 오류가 발생했습니다: " + result.message);
              }
            } catch (error) {
              console.error("삭제 처리 오류:", error);
              showAlert("삭제 처리 중 오류가 발생했습니다.");
            } finally {
              hideLoading(); // 로딩 표시 종료
            }
          });

        // 초기화 버튼 이벤트 리스너
        document
          .getElementById("resetBtn")
          .addEventListener("click", function () {
            allClearContents();

            // 직원목록 테이블의 모든 행에서 선택 효과 제거
            const tableBody = document.getElementById("employeeTableBody");
            if (tableBody) {
              const allRows = tableBody.querySelectorAll("tr");
              allRows.forEach((row) => {
                row.classList.remove("selected-row");
              });
            }

            // 수정/삭제 버튼 비활성화, 입력 버튼 활성화
            document.getElementById("editBtn").disabled = true;
            document.getElementById("deleteBtn").disabled = true;
            document.getElementById("submitBtn").disabled = false;
          });

        // 데이터 저장 함수 정의
        function append_employeeLineData() {
          // Promise를 반환하도록 수정
          return new Promise((resolve, reject) => {
            // 현재 날짜와 시간으로 고유 ID 생성
            const now = new Date();
            const year = now.getFullYear().toString();
            const month = (now.getMonth() + 1).toString().padStart(2, "0");
            const day = now.getDate().toString().padStart(2, "0");
            const hours = now.getHours().toString().padStart(2, "0");
            const minutes = now.getMinutes().toString().padStart(2, "0");
            const seconds = now.getSeconds().toString().padStart(2, "0");

            // M + 년월일시분초 형식의 ID 생성 (예: M20230815143022)
            const newemployeeId =
              "M" + year + month + day + hours + minutes + seconds;
            // 폼 데이터 수집
            const formData = {
              generatedId: newemployeeId, // 새로 생성한 ID 추가
              employeeId: document.getElementById("employeeId").value,
              name: document.getElementById("name").value,
              careNumber: document.getElementById("careNumber").value,
              ssn: document.getElementById("ssn").value,
              birthdate: document.getElementById("birthdate").value,
              age: document.getElementById("age").value,
              admissionDate: document.getElementById("admissionDate").value,
              dischargeDate: document.getElementById("dischargeDate").value,
              address: document.getElementById("address").value,
              mobile: document.getElementById("mobile").value,
              emergencyContact: document.getElementById("emergencyContact").value,
              email: document.getElementById("email").value,
              medications: document.getElementById("medications").value,
              allergies: document.getElementById("allergies").value,
              hospital: document.getElementById("hospital").value,
              medicalHistory: document.getElementById("medicalHistory").value,
              guardianRelation:
                document.getElementById("guardianRelation").value,
              guardianName: document.getElementById("guardianName").value,
              guardianContact: document.getElementById("guardianContact").value,
              livingWith: document.getElementById("livingWith").value,
              livingWithName: document.getElementById("livingWithName").value,
              livingWithContact:
                document.getElementById("livingWithContact").value,
              employeeNeeds: document.getElementById("employeeNeeds").value,
              guardianNeeds: document.getElementById("guardianNeeds").value,
              dailyRoutine: document.getElementById("dailyRoutine").value,
            };

            if (!formData.name) {
              showAlert("직원 이름을 입력해주세요.");
              reject("직원 이름이 입력되지 않았습니다.");
              return;
            }

            // 데이터 제출 (Supabase 함수 호출)
            processFormData(formData)
              .then(function (result) {
                if (result.success) {
                  //showAlert(result.message + " 직원 ID: " + result.employeeId);
                  // allClearContents() 호출 제거 - 이벤트 리스너에서 처리
                  resolve(result); // Promise 성공 처리
                } else {
                  showAlert(result.message);
                  reject(result.message); // Promise 실패 처리
                }
              })
              .catch(function (error) {
                showAlert("오류가 발생했습니다: " + error);
                reject(error); // Promise 실패 처리
              });
          });
        }

        // 상담등록. 상담직원 등록데이터 저장 함수 정의
        function temp_employeeLineData() {
          // Promise를 반환하도록 수정생성
          return new Promise((resolve, reject) => {
            // 현재 날짜와 시간으로 고유 ID 생성
            const now = new Date();
            const year = now.getFullYear().toString();
            const month = (now.getMonth() + 1).toString().padStart(2, "0");
            const day = now.getDate().toString().padStart(2, "0");
            const hours = now.getHours().toString().padStart(2, "0");
            const minutes = now.getMinutes().toString().padStart(2, "0");
            const seconds = now.getSeconds().toString().padStart(2, "0");

            // M + 년월일시분초 형식의 ID 생성 (예: M20230815143022)
            const newemployeeId =
              "T" + year + month + day + hours + minutes + seconds;
            // 폼 데이터 수집
            const formData = {
              generatedId: newemployeeId, // 새로 생성한 ID 추가
              employeeId: "상담직원",
              name: document.getElementById("name").value,
              careNumber: document.getElementById("careNumber").value,
              ssn: document.getElementById("ssn").value,
              birthdate: document.getElementById("birthdate").value,
              age: document.getElementById("age").value,
              admissionDate: "",
              dischargeDate: document.getElementById("dischargeDate").value,
              address: document.getElementById("address").value,
              mobile: document.getElementById("mobile").value,
              emergencyContact: document.getElementById("emergencyContact").value,
              email: document.getElementById("email").value,
              medications: document.getElementById("medications").value,
              allergies: document.getElementById("allergies").value,
              hospital: document.getElementById("hospital").value,
              medicalHistory: document.getElementById("medicalHistory").value,
              guardianRelation:
                document.getElementById("guardianRelation").value,
              guardianName: document.getElementById("guardianName").value,
              guardianContact: document.getElementById("guardianContact").value,
              livingWith: document.getElementById("livingWith").value,
              livingWithName: document.getElementById("livingWithName").value,
              livingWithContact:
                document.getElementById("livingWithContact").value,
              employeeNeeds: document.getElementById("employeeNeeds").value,
              guardianNeeds: document.getElementById("guardianNeeds").value,
              dailyRoutine: document.getElementById("dailyRoutine").value,
            };

            if (!formData.name) {
              showAlert("직원 이름을 입력해주세요.");
              reject("직원 이름이 입력되지 않았습니다.");
              return;
            }

            // 데이터 제출 (Supabase 함수 호출)
            processFormData(formData)
              .then(function (result) {
                if (result.success) {
                  //showAlert(result.message + " 직원 ID: " + result.employeeId);
                  // allClearContents() 호출 제거 - 이벤트 리스너에서 처리
                  resolve(result); // Promise 성공 처리
                } else {
                  showAlert(result.message);
                  reject(result.message); // Promise 실패 처리
                }
              })
              .catch(function (error) {
                showAlert("오류가 발생했습니다: " + error);
                reject(error); // Promise 실패 처리
              });
          });
        }
        

        
        // 입력 버튼 이벤트 리스너 제거 (이미 아래에 다른 이벤트 리스너가 있으므로)

        // 조회 기준일 초기값 설정 (오늘 날짜)
        const today = new Date().toISOString().split("T")[0]; // YYYY-MM-DD 형식
        document.getElementById("referenceDate").value = today;

        // 주민등록번호 입력 필드에 이벤트 추가
        const ssnField = document.getElementById("ssn");

        ssnField.addEventListener("blur", function () {
          const value = this.value.trim();

          // 값이 비어있으면 검사하지 않음
          if (value === "") {
            return;
          }

          // 1단계: 13자리 숫자인지 확인
          if (!idNumberCheck(value)) {
            showAlert("주민등록번호는 13자리 숫자여야 합니다.");
            this.value = "";
            this.focus();
            return;
          }

          // 2단계: 형식에 맞게 변환
          this.value = idNumberChange(value);

          // 3단계: 최종 형식 확인
          if (!idNumberDoubleCheck(this.value)) {
            showAlert(
              "주민등록번호 형식이 올바르지 않습니다. (000000-0000000)"
            );
            this.value = "";
            this.focus();
            return;
          }

          // 4단계: 중복 체크 - 직원번호가 "상담직원"이 아닌 경우에만 진행
          const currentemployeeId = document.getElementById("employeeId").value;
          if (currentemployeeId !== "상담직원") {
            const isDuplicate = storedData_all.some(row => row[4] === this.value);
            if (isDuplicate) {
              showAlert("등록된 동일한 주민번호가 있습니다.");
              this.value = "";
              this.focus();
            }
          }
        });

        // 생년월일, 입소일, 퇴소일 필드에 이벤트 추가
        const dateFields = ["birthdate", "admissionDate", "dischargeDate"];

        dateFields.forEach((fieldId) => {
          const field = document.getElementById(fieldId);

          field.addEventListener("blur", function () {
            const value = this.value.trim();

            if (value !== "" && !date8numberCheck(value)) {
              showAlert("8자리 숫자만 입력 가능합니다. 예) 20230101");
              this.value = "";
              this.focus();
            }

            // 생년월일 필드인 경우 만 나이 계산
            if (fieldId === "birthdate" && value !== "") {
              const age = manAge(value);
              document.getElementById("age").value = age;
            }
          });
        });

        // 이메일 주소 입력 필드에 이벤트 추가
        const emailField = document.getElementById("email");

        emailField.addEventListener("blur", function () {
          const value = this.value.trim();

          if (value !== "" && !emailFormatCheck(value)) {
            showAlert("올바른 이메일 형식이 아닙니다. 예) example@domain.com");
            this.value = "";
            this.focus();
          }
        });

        // 휴대전화번호 입력 필드에 이벤트 추가
        const phoneFields = ["mobile", "guardianContact", "livingWithContact", "emergencyContact"];

        phoneFields.forEach((fieldId) => {
          const field = document.getElementById(fieldId);

          if (field) {
            field.addEventListener("blur", function () {
              const value = this.value.trim();

              if (value === "") {
                return;
              }

              // 1단계: 기본 형식 확인
              if (!phoneNumberCheck(value)) {
                showAlert("전화번호는 숫자 및 하이픈(-)만 입력 가능합니다.");
                this.value = "";
                this.focus();
                return;
              }

              // 2단계: 형식에 맞게 변환
              this.value = phoneNumberChange(value);

              // 3단계: 최종 형식 확인
              if (!phoneNumberDoubleCheck(this.value)) {
                showAlert("올바른 전화번호 형식이 아닙니다. 예) 010-1234-5678");
                this.value = "";
                this.focus();
              }
            });
          }
        });

        // 입력 버튼 이벤트 리스너 추가
        document
          .getElementById("submitBtn")
          .addEventListener("click", async function (e) {
            e.preventDefault(); // 폼 기본 제출 동작 방지

            // 필수 필드 검증
            if (!validateForm()) {
              return;
            }

            try {
              showLoading(); // 로딩 표시 시작
              
              // 현재 시간 기반 고유 ID 생성
              const timestamp = new Date().getTime();
              const randomPart = Math.floor(Math.random() * 1000);
              const generatedId = `M${new Date().toISOString().replace(/[-:TZ.]/g, "")}`;

              // 직원 ID 확인
              const currentemployeeId = document.getElementById("employeeId").value;
              
              // 폼 데이터 수집
              const formData = {
                employeeId: currentemployeeId,
                name: document.getElementById("name").value,
                careNumber: document.getElementById("careNumber").value,
                ssn: document.getElementById("ssn").value,
                birthdate: document.getElementById("birthdate").value,
                age: document.getElementById("age").value,
                admissionDate: document.getElementById("admissionDate").value,
                dischargeDate: document.getElementById("dischargeDate").value,
                address: document.getElementById("address").value,
                mobile: document.getElementById("mobile").value,
                emergencyContact: document.getElementById("emergencyContact").value,
                email: document.getElementById("email").value,
                medications: document.getElementById("medications").value,
                allergies: document.getElementById("allergies").value,
                hospital: document.getElementById("hospital").value,
                medicalHistory: document.getElementById("medicalHistory").value,
                guardianRelation: document.getElementById("guardianRelation").value,
                guardianName: document.getElementById("guardianName").value,
                guardianContact: document.getElementById("guardianContact").value,
                livingWith: document.getElementById("livingWith").value,
                livingWithName: document.getElementById("livingWithName").value,
                livingWithContact: document.getElementById("livingWithContact").value,
                employeeNeeds: document.getElementById("employeeNeeds").value,
                guardianNeeds: document.getElementById("guardianNeeds").value,
                dailyRoutine: document.getElementById("dailyRoutine").value,
              };
              
              // 응답 변수 선언
              let serverResponse = null;
              
              // 직원 ID에 따라 다른 함수 실행
              if (currentemployeeId === "상담직원") {
                // 상담직원인 경우 입소일을 빈 문자열로 설정
                formData.admissionDate = "";
                
                // 상담직원인 경우 processFormData 함수 사용 - Promise 반환 대기
                serverResponse = await new Promise((resolve, reject) => {
                  processFormData(formData)
                    .then(function (result) {
                      if (result.success) {
                        showAlert("상담직원 정보가 저장되었습니다.");
                      } else {
                        showAlert("오류가 발생했습니다: " + (result.message || ""));
                      }
                      resolve(result);
                    })
                    .catch(function (error) {
                      showAlert("오류가 발생했습니다: " + error);
                      reject(error);
                    });
                });
              } else {
                // 일반 직원, 신규직원등록중, 신규직원전환중 모두 같은 함수 사용 - Promise 반환 대기
                serverResponse = await new Promise((resolve, reject) => {
                  processFormData(formData)
                    .then(function (result) {
                      if (result.success) {
                        // 성공 시 처리
                        if (result.employeeId && (currentemployeeId === "신규직원등록중" || currentemployeeId === "신규직원전환중")) {
                          showAlert(`새 직원번호 ${result.employeeId}로 등록되었습니다.`);
                        } else {
                          showAlert("직원 정보가 저장되었습니다.");
                        }
                        resolve(result);
                      } else {
                        showAlert("오류가 발생했습니다: " + (result.message || ""));
                        reject(result.message || "알 수 없는 오류");
                      }
                    })
                    .catch(function (error) {
                      showAlert("오류가 발생했습니다: " + error);
                      reject(error);
                    });
                });
              }

              console.log("서버 응답 완료:", serverResponse);
              
              // 서버 응답 후 데이터 갱신 및 테이블 업데이트
              if (serverResponse && serverResponse.success) {
                await loadAllData(); // 서버에서 새로운 데이터 로드
                console.log("데이터 로드 완료");
                
                table_Currentemployee(); // 테이블 업데이트
                console.log("테이블 업데이트 완료");
                
                allClearContents(); // 테이블 업데이트 후 폼 초기화
                console.log("폼 초기화 완료");
              }
              
              hideLoading(); // 로딩 표시 종료
            } catch (error) {
              hideLoading(); // 에러 발생 시 로딩 표시 종료
              showAlert("데이터 처리 중 오류가 발생했습니다: " + error);
              console.error("처리 오류:", error);
            }
          });

        // 수정 버튼 이벤트 리스너
        document
          .getElementById("editBtn")
          .addEventListener("click", async function (e) {
            e.preventDefault(); // 폼 기본 제출 동작 방지

            // 필수 필드 검증 강화
            const currentemployeeId = document.getElementById("employeeId").value;
            
            let isFormValid = false;
            if (currentemployeeId === "상담직원") {
              // 상담직원의 경우만 간단한 유효성 검사
              const name = document.getElementById("name").value;
              const mobile = document.getElementById("mobile").value;
              const ssn = document.getElementById("ssn").value;
              
              if (!name || !mobile || !ssn) {
                const missingFields = [];
                if (!name) missingFields.push("이름");
                if (!mobile) missingFields.push("연락처");
                if (!ssn) missingFields.push("주민등록번호");
                showAlert(`다음 항목을 입력해주세요: ${missingFields.join(", ")}`);
                return;
              }
              isFormValid = true;
            } else {
              // 신규직원등록중, 신규직원전환중, 일반 직원 모두 기존 유효성 검사 실행
              const validationResult = EntryCheck();
              
              if (!validationResult.isValid) {
                const missingFieldsText = validationResult.missingFields.join(", ");
                showAlert(`다음 항목을 입력해주세요: ${missingFieldsText}`);
                return;
              }
              isFormValid = true;
            }
            
            if (!isFormValid) {
              return;
            }
            
            // generatedId 확인 (선택된 직원이 있는지 확인)
            let generatedId = document.getElementById("generatedId").value;
            if (!generatedId || generatedId.trim() === "") {
              // generatedId가 없는 경우 selectedemployeeId 확인
              if (typeof selectedemployeeId !== 'undefined' && selectedemployeeId) {
                generatedId = selectedemployeeId;
              } else {
                showAlert("선택된 직원이 없습니다. 직원을 선택한 후 다시 시도해주세요.");
                return;
              }
            }

            try {
              showLoading(); // 로딩 표시 시작
              console.log("수정 시작: 기존 ID =", generatedId);

              // 1. 먼저 기존 직원 데이터를 OUTDATED_직원관리 시트로 이동 - Promise로 처리
              const moveResult = await new Promise((resolve, reject) => {
                move_employeeLine(generatedId)
                  .then(function (result) {
                    if (result.success) {
                      console.log("기존 데이터 이동 성공");
                      resolve(result);
                    } else {
                      console.error("기존 데이터 이동 실패:", result.message);
                      showAlert("기존 데이터 이동 중 오류가 발생했습니다: " + (result.message || ""));
                      reject(result.message);
                    }
                  })
                  .catch(function (error) {
                    console.error("기존 데이터 이동 오류:", error);
                    showAlert("기존 데이터 이동 중 오류가 발생했습니다: " + error);
                    reject(error);
                  });
              });

              // 2. 새 데이터 수집
              const timestamp = new Date().getTime();
              const randomPart = Math.floor(Math.random() * 1000);
              const newGeneratedId = `M${new Date().toISOString().replace(/[-:TZ.]/g, "")}`;
              console.log("새 ID 생성:", newGeneratedId);

              const formData = {
                generatedId: newGeneratedId,
                employeeId: document.getElementById("employeeId").value,
                name: document.getElementById("name").value,
                careNumber: document.getElementById("careNumber").value,
                ssn: document.getElementById("ssn").value,
                birthdate: document.getElementById("birthdate").value,
                age: document.getElementById("age").value,
                admissionDate: document.getElementById("admissionDate").value,
                dischargeDate: document.getElementById("dischargeDate").value,
                address: document.getElementById("address").value, // 주소 필드 추가
                mobile: document.getElementById("mobile").value,
                emergencyContact: document.getElementById("emergencyContact").value,
                email: document.getElementById("email").value,
                medications: document.getElementById("medications").value,
                allergies: document.getElementById("allergies").value,
                hospital: document.getElementById("hospital").value,
                medicalHistory: document.getElementById("medicalHistory").value,
                guardianRelation: document.getElementById("guardianRelation").value,
                guardianName: document.getElementById("guardianName").value,
                guardianContact: document.getElementById("guardianContact").value,
                livingWith: document.getElementById("livingWith").value,
                livingWithName: document.getElementById("livingWithName").value,
                livingWithContact: document.getElementById("livingWithContact").value,
                employeeNeeds: document.getElementById("employeeNeeds").value,
                guardianNeeds: document.getElementById("guardianNeeds").value,
                dailyRoutine: document.getElementById("dailyRoutine").value,
              };

              // 3. 데이터 저장 - 직원 유형에 따라 다른 함수 호출
              let serverResponse = null;
              if (currentemployeeId === "상담직원") {
                // 상담직원인 경우 입소일을 빈 문자열로 설정
                formData.admissionDate = "";
                
                // 상담직원도 processFormData 사용 - Promise로 대기
                serverResponse = await new Promise((resolve, reject) => {
                  processFormData(formData)
                    .then(function (result) {
                      if (result.success) {
                        showAlert("상담직원 정보가 수정되었습니다.");
                        resolve(result);
                      } else {
                        showAlert("오류가 발생했습니다: " + (result.message || ""));
                        reject(result.message || "알 수 없는 오류");
                      }
                    })
                    .catch(function (error) {
                      showAlert("오류가 발생했습니다: " + error);
                      reject(error);
                    });
                });
              } else {
                // 일반 직원이나 신규직원전환중 모두 processFormData로 처리 - Promise로 대기
                serverResponse = await new Promise((resolve, reject) => {
                  processFormData(formData)
                    .then(function (result) {
                      if (result.success) {
                        // 성공 시 처리
                        if (result.employeeId && currentemployeeId === "신규직원전환중") {
                          showAlert(`직원이 ${result.employeeId} 번호로 전환되었습니다.`);
                        } else {
                          showAlert("직원 정보가 성공적으로 수정되었습니다.");
                        }
                        resolve(result);
                      } else {
                        showAlert("오류가 발생했습니다: " + (result.message || ""));
                        reject(result.message || "알 수 없는 오류");
                      }
                    })
                    .catch(function (error) {
                      showAlert("오류가 발생했습니다: " + error);
                      reject(error);
                    });
                });
              }

              console.log("서버 응답 완료:", serverResponse);

              // 4. 데이터 갱신 및 테이블 업데이트
              if (serverResponse && serverResponse.success) {
                await loadAllData(); // 서버에서 새로운 데이터 로드
                console.log("데이터 로드 완료");
                
                table_Currentemployee(); // 테이블 업데이트
                console.log("테이블 업데이트 완료");
                
                allClearContents(); // 테이블 업데이트 후 폼 초기화
                console.log("폼 초기화 완료");
              }

              // 5. 버튼 상태 업데이트
              document.getElementById("editBtn").disabled = true;
              document.getElementById("deleteBtn").disabled = true;
              document.getElementById("submitBtn").disabled = false;
              
              hideLoading(); // 로딩 표시 종료
            } catch (error) {
              hideLoading(); // 에러 발생 시 로딩 표시 종료
              showAlert("데이터 처리 중 오류가 발생했습니다: " + error);
              console.error("처리 오류:", error);
            }
          });

        // 신규직원등록 버튼 클릭 이벤트
        const newemployeeBtn = document.getElementById("newemployeeBtn");
        if (newemployeeBtn) {
          newemployeeBtn.addEventListener("click", function () {
            // 폼 초기화
            allClearContents();

            // 새 직원번호 대신 "신규직원등록중" 텍스트 설정
            document.getElementById("employeeId").value = "신규직원등록중";

            // 버튼 상태 설정 - 입력 버튼 활성화, 수정/삭제 버튼 비활성화
            document.getElementById("submitBtn").disabled = false;
            document.getElementById("editBtn").disabled = true;
            document.getElementById("deleteBtn").disabled = true;

            // 직원목록 테이블의 선택 효과 제거
            const tableBody = document.getElementById("employeeTableBody");
            if (tableBody) {
              const allRows = tableBody.querySelectorAll("tr");
              allRows.forEach((row) => {
                row.classList.remove("selected-row");
              });
            }
          });
        }

        // 상담직원등록 버튼 클릭 이벤트
        const counselingemployeeBtn = document.getElementById("counselingemployeeBtn");
        if (counselingemployeeBtn) {
          counselingemployeeBtn.addEventListener("click", function () {
            // 폼 초기화
            allClearContents();

            // 새 직원번호 생성 및 설정
            const newemployeeId = "상담직원";
            document.getElementById("employeeId").value = newemployeeId;

            // 버튼 상태 설정 - 입력 버튼 활성화, 수정/삭제 버튼 비활성화
            document.getElementById("submitBtn").disabled = false;
            document.getElementById("editBtn").disabled = true;
            document.getElementById("deleteBtn").disabled = true;

            // 직원목록 테이블의 선택 효과 제거
            const tableBody = document.getElementById("employeeTableBody");
            if (tableBody) {
              const allRows = tableBody.querySelectorAll("tr");
              allRows.forEach((row) => {
                row.classList.remove("selected-row");
              });
            }
          });
        }



        // 직원전환 버튼 클릭 이벤트
        const convertBtn = document.getElementById("convertBtn");
        if (convertBtn) {
          convertBtn.addEventListener("click", function () {
            // 현재 선택된 직원이 상담직원인지 확인
            const currentemployeeId = document.getElementById("employeeId").value;
            if (currentemployeeId !== "상담직원") {
              showAlert("상담직원만 직원으로 전환할 수 있습니다.");
              return;
            }

            // 새 직원번호 생성 대신 "신규직원전환중" 텍스트 설정
            document.getElementById("employeeId").value = "신규직원전환중";

            // 버튼 상태 설정 - 입력 버튼 활성화, 수정/삭제 버튼 비활성화
            document.getElementById("submitBtn").disabled = true;
            document.getElementById("editBtn").disabled = false;
            document.getElementById("deleteBtn").disabled = false;

            // 직원목록 테이블의 선택 효과 제거
            const tableBody = document.getElementById("employeeTableBody");
            if (tableBody) {
              const allRows = tableBody.querySelectorAll("tr");
              allRows.forEach((row) => {
                row.classList.remove("selected-row");
              });
            }

            // 사용자에게 알림
            showAlert("수정 버튼을 눌러 직원으로 전환할 수 있습니다.");
          });
        }

        // 테이블 정렬 기능 추가
        const employeeTable = document.getElementById('employeeTable');
        const thead = employeeTable.querySelector('thead');
        const tbody = employeeTable.querySelector('tbody');
        let currentSort = {
          column: -1,
          direction: 'asc'
        };

        thead.addEventListener('click', function(e) {
          if (e.target.tagName === 'TH') {
            const column = Array.from(e.target.parentElement.children).indexOf(e.target);
            
            // 같은 컬럼을 다시 클릭한 경우 정렬 방향을 반대로 변경
            if (currentSort.column === column) {
              currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
            } else {
              currentSort.column = column;
              currentSort.direction = 'asc';
            }

            // 정렬 아이콘 업데이트
            const headers = thead.querySelectorAll('th');
            headers.forEach((header, index) => {
              header.classList.remove('sort-asc', 'sort-desc');
              if (index === column) {
                header.classList.add(currentSort.direction === 'asc' ? 'sort-asc' : 'sort-desc');
              }
            });

            // 테이블 정렬
            const rows = Array.from(tbody.querySelectorAll('tr'));
            rows.sort((a, b) => {
              const aValue = a.children[column].textContent.trim();
              const bValue = b.children[column].textContent.trim();
              
              // 직원번호 정렬 (특별 처리)
              if (column === 0) {
                // "상담직원"은 항상 위에 표시
                if (aValue === "상담직원" && bValue !== "상담직원") {
                  return currentSort.direction === 'asc' ? -1 : 1;
                }
                if (aValue !== "상담직원" && bValue === "상담직원") {
                  return currentSort.direction === 'asc' ? 1 : -1;
                }
                
                // 둘 다 "상담직원"이거나 둘 다 숫자 형식인 경우
                if (aValue === bValue) return 0;
                
                // M으로 시작하는 직원번호는 숫자 부분만 추출하여 비교
                if (aValue.startsWith('M') && bValue.startsWith('M')) {
                  const aNum = parseInt(aValue.substring(1), 10);
                  const bNum = parseInt(bValue.substring(1), 10);
                  return currentSort.direction === 'asc' ? aNum - bNum : bNum - aNum;
                }
                
                // 그 외의 경우는 문자열 비교
                return currentSort.direction === 'asc'
                  ? aValue.localeCompare(bValue)
                  : bValue.localeCompare(aValue);
              }
              
              // 생년월일, 입소일, 퇴소일 - 숫자 정렬
              if ([3, 4, 5].includes(column)) {
                return currentSort.direction === 'asc' 
                  ? Number(aValue) - Number(bValue)
                  : Number(bValue) - Number(aValue);
              }
              
              // 문자열 정렬 (직원명, 휴대전화번호)
              return currentSort.direction === 'asc'
                ? aValue.localeCompare(bValue)
                : bValue.localeCompare(aValue);
            });

            // 정렬된 행을 테이블에 다시 추가
            rows.forEach(row => tbody.appendChild(row));
          }
        });


      });


      

      // (구분)입력 데이터 유효성 검사 함수
      function EntryCheck() {
        console.log("EntryCheck 함수 실행");
        
        // 1. 필수 입력 필드 (빈칸이 아니어야 함)
        const requiredFields = [
          { id: "employeeId", name: "직원번호" },
          { id: "name", name: "직원명" },
          { id: "careNumber", name: "장기요양번호" },
          { id: "ssn", name: "주민등록번호" },
          { id: "birthdate", name: "생년월일" },
          { id: "admissionDate", name: "입소일" },
          { id: "dischargeDate", name: "퇴소일" },
          { id: "address", name: "주소" },
          { id: "mobile", name: "휴대전화번호" },
          { id: "guardianName", name: "보호자명" },
          { id: "guardianContact", name: "보호자 연락처" },
        ];

        // 2. 필수 선택 필드 (선택이 아니어야 함)
        const requiredSelects = [
          { id: "guardianRelation", name: "보호자관계" },
        ];

        // 누락된 항목 목록
        const missingFields = [];

        // 1. 텍스트 입력 필드 검사
        requiredFields.forEach((field) => {
          const element = document.getElementById(field.id);
          if (element && element.value.trim() === "") {
            missingFields.push(field.name);
          }
        });

        // 2. 선택 필드 검사
        requiredSelects.forEach((field) => {
          const element = document.getElementById(field.id);
          if (element && (element.value === "" || element.value === "선택")) {
            missingFields.push(field.name);
          }
        });

        // 유효성 검사 결과 반환
        if (missingFields.length > 0) {
          return {
            isValid: false,
            missingFields: missingFields,
          };
        }

        return {
          isValid: true,
          missingFields: [],
        };
      }

      //(구분)code.gs파일에서 데이터 가져오기
      let storedData_all = []; // 모든 데이터를 저장할 배열

      // (구분)Promise를 반환하는 loadAllData 함수로 변경
      function loadAllData() {
        return new Promise(async (resolve, reject) => {
          console.log("loadAllData: 데이터 로드 시작");
          showLoading(); // 로딩 표시 시작
          
          try {
            // getData_All 함수 사용
            const result = await getData_All();
            
            if (result.success) {
              console.log("loadAllData: Supabase에서 데이터 수신 성공");
              
              // 데이터 유효성 확인
              if (!result.data || result.data.length === 0) {
                console.error("loadAllData: Supabase에서 빈 데이터 반환");
                storedData_all = [];
              } else {
                console.log(`loadAllData: ${result.data.length}개의 행 데이터 수신`);
                
                // 데이터를 배열 형식으로 변환 (기존 코드와 호환되도록)
                storedData_all = result.data.map(row => [
                  row.직원등록_ID || row.generatedId,
                  row.직원번호 || row.employeeId,
                  row.직원명 || row.name,
                  row.장기요양번호 || row.careNumber,
                  row.주민등록번호 || row.ssn,
                  row.생년월일 || row.birthdate,
                  row["(만)나이"] || row.age,
                  row.입소일 || row.admissionDate,
                  row.퇴소일 || row.dischargeDate,
                  row.주소 || "", // 주소 필드 다시 활성화
                  row.휴대전화번호 || row.mobile,
                  row.비상연락망 || row.emergencyContact,
                  row.이메일주소 || row.email,
                  row.복용약물정보 || row.medications,
                  row.알레르기정보 || row.allergies,
                  row.진료병원 || row.hospital,
                  row.주요진료이력 || row.medicalHistory,
                  row.보호자관계 || row.guardianRelation,
                  row.보호자명 || row.guardianName, 
                  row.보호자연락처 || row.guardianContact,
                  row.동거인관계 || row.livingWith,
                  row.동거인명 || row.livingWithName,
                  row.동거인연락처 || row.livingWithContact,
                  row["직원 주요 기대 및 요구"] || row.employeeNeeds,
                  row["보호자 주요 기대 및 요구"] || row.guardianNeeds,
                  row["주요 하루일과"] || row.dailyRoutine
                ]);
              }
              
              // 로그에 데이터 샘플 출력 (처음 3개 행만)
              if (storedData_all.length > 0) {
                console.log("loadAllData: 데이터 샘플", 
                            storedData_all.slice(0, Math.min(3, storedData_all.length)));
              }
              
              hideLoading(); // 로딩 표시 종료
              resolve(storedData_all); // Promise 해결
            } else {
              throw new Error(result.message || "데이터 조회 실패");
            }
          } catch (error) {
            console.error("loadAllData: 데이터 로드 실패!", error);
            hideLoading(); // 로딩 표시 종료 (에러 시에도)
            reject(error); // Promise 거부
          }
        });
      }

      // (구분)페이지 로드 시 실행할 async 함수
      async function initializeData() {
        try {
          showLoading(); // 로딩 표시
          await loadAllData(); // 데이터 로드가 완료될 때까지 대기
          table_Currentemployee(); // 데이터 로드 완료 후 테이블 표시
          hideLoading(); // 로딩 표시 종료
        } catch (error) {
          hideLoading(); // 에러 발생 시 로딩 표시 종료
        }
      }

      // (구분)전체 직원 목록을 테이블에 표시하는 함수
      function table_allemployee() {
        console.log("table_allemployee: 테이블 업데이트 시작");
        // 먼저 데이터 로드가 완료되었는지 확인
        if (!storedData_all || storedData_all.length === 0) {
          console.warn("table_allemployee: 데이터가 비어있음");
          showAlert("데이터가 로드되지 않았습니다. 잠시 후 다시 시도해주세요.");
          return;
        }

        const tableBody = document.getElementById("employeeTableBody");

        // 테이블 초기화
        console.log("table_allemployee: 테이블 초기화");
        tableBody.innerHTML = "";

        // 직원번호(employeeId) 순으로 데이터 정렬 (복사본 사용)
        const sortedData = [...storedData_all].sort((a, b) => {
          const employeeIdA = a[1] || ""; // 배열[1]은 직원번호
          const employeeIdB = b[1] || "";
          return employeeIdA.localeCompare(employeeIdB);
        });

        console.log(`table_allemployee: 정렬된 전체 직원 수: ${sortedData.length}`);

        // 정렬된 데이터를 테이블에 추가
        sortedData.forEach((row) => {
          const employeeNo = row[1]; // 배열[1]열 - 직원번호
          const employeeName = row[2]; // 배열[2]열 - 직원명
          const mobile = row[10]; // 배열[10]열 - 휴대전화번호
          const birthdate = row[5]; // 배열[5]열 - 생년월일
          const admissionDate = row[7]; // 배열[7]열 - 입소일
          const dischargeDate = row[8]; // 배열[8]열 - 퇴소일
          // 새로운 행 생성
          const newRow = document.createElement("tr");
          // 행에 셀 추가
          newRow.innerHTML = `
            <td>${employeeNo}</td>
            <td>${employeeName}</td>
            <td>${mobile}</td>
            <td>${birthdate}</td>
            <td>${admissionDate}</td>
            <td>${dischargeDate}</td>
          `;

          // 테이블에 행 추가
          tableBody.appendChild(newRow);

          // 행 더블클릭 이벤트 추가
          newRow.addEventListener("dblclick", function () {
            // 선택된 행 하이라이트 처리
            const allRows = tableBody.querySelectorAll("tr");
            allRows.forEach((r) => r.classList.remove("selected-row"));
            newRow.classList.add("selected-row");

            // 수정 버튼과 삭제 버튼 활성화, 입력 버튼 비활성화
            document.getElementById("editBtn").disabled = false;
            document.getElementById("deleteBtn").disabled = false;
            document.getElementById("submitBtn").disabled = true;

            // 데이터를 각 탭에 표시
            fillemployeeData(row);
          });
        });
        
        console.log("table_allemployee: 테이블 업데이트 완료");
      }

      // (구분)직원 데이터를 각 탭에 채우는 함수
      function fillemployeeData(data) {
        // 직원등록_ID를 전역변수에 저장
        selectedemployeeId = data[0] || "";
        
        // 숨겨진 입력 필드에 직원등록_ID 저장
        document.getElementById("generatedId").value = selectedemployeeId;
        
        // 기본 정보 탭
        document.getElementById("employeeId").value = data[1] || ""; // 직원번호
        document.getElementById("name").value = data[2] || ""; // 직원명
        document.getElementById("careNumber").value = data[3] || ""; // 장기요양번호
        document.getElementById("ssn").value = data[4] || ""; // 주민등록번호
        document.getElementById("birthdate").value = data[5] || ""; // 생년월일
        document.getElementById("age").value = data[6] || ""; // (만)나이
        document.getElementById("admissionDate").value = data[7] || ""; // 입소일
        document.getElementById("dischargeDate").value = data[8] || ""; // 퇴소일
        document.getElementById("address").value = data[9] || ""; // 주소
        document.getElementById("mobile").value = data[10] || ""; // 휴대전화번호
        document.getElementById("emergencyContact").value = data[11] || ""; // 비상연락망
        document.getElementById("email").value = data[12] || ""; // 이메일주소
        
        // 의료 정보
        const medications = document.getElementById("medications");
        if (medications) medications.value = data[13] || ""; // 복용약물정보
        
        const allergies = document.getElementById("allergies");
        if (allergies) allergies.value = data[14] || ""; // 알레르기정보
        
        const hospital = document.getElementById("hospital");
        if (hospital) hospital.value = data[15] || ""; // 진료병원
        
        const medicalHistory = document.getElementById("medicalHistory");
        if (medicalHistory) medicalHistory.value = data[16] || ""; // 주요진료이력
        
        // 보호자 정보
        const guardianRelation = document.getElementById("guardianRelation");
        if (guardianRelation) guardianRelation.value = data[17] || ""; // 보호자관계
        
        const guardianName = document.getElementById("guardianName");
        if (guardianName) guardianName.value = data[18] || ""; // 보호자명
        
        const guardianContact = document.getElementById("guardianContact");
        if (guardianContact) guardianContact.value = data[19] || ""; // 보호자연락처
        
        // 동거인 정보
        const livingWith = document.getElementById("livingWith");
        if (livingWith) livingWith.value = data[20] || ""; // 동거인관계
        
        const livingWithName = document.getElementById("livingWithName");
        if (livingWithName) livingWithName.value = data[21] || ""; // 동거인명
        
        const livingWithContact = document.getElementById("livingWithContact");
        if (livingWithContact) livingWithContact.value = data[22] || ""; // 동거인연락처
        
        // 기대 및 요구사항
        const employeeNeeds = document.getElementById("employeeNeeds");
        if (employeeNeeds) employeeNeeds.value = data[23] || ""; // 직원 주요 기대 및 요구
        
        const guardianNeeds = document.getElementById("guardianNeeds");
        if (guardianNeeds) guardianNeeds.value = data[24] || ""; // 보호자 주요 기대 및 요구
        
        // 주요 하루일과
        const dailyRoutine = document.getElementById("dailyRoutine");
        if (dailyRoutine) dailyRoutine.value = data[25] || ""; // 주요 하루일과
      }

      // (구분)현재 등록중인 직원 목록을 테이블에 표시하는 함수
      function table_Currentemployee() {
        console.log("table_Currentemployee: 테이블 업데이트 시작");
        // 먼저 데이터 로드가 완료되었는지 확인
        if (!storedData_all || storedData_all.length === 0) {
          console.warn("table_Currentemployee: 데이터가 비어있음");
          showAlert("표시할 직원 데이터가 없습니다.");
          return;
        }

        const tableBody = document.getElementById("employeeTableBody");
        const referenceDate = document.getElementById("referenceDate").value;

        // 날짜 형식 변환 (YYYY-MM-DD -> YYYYMMDD)
        const formattedRefDate = referenceDate.replace(/-/g, "");

        // 테이블 초기화
        console.log("table_Currentemployee: 테이블 초기화");
        tableBody.innerHTML = "";

        // 기준일에 해당하는 현재 등록 직원 필터링
        const currentemployees = storedData_all.filter(row => {
          // 직원번호가 "상담직원"인 경우 제외
          if (row[1] === "상담직원") {
            console.log(`상담직원 제외: ${row[2]}`);
            return false;
          }
          
          // 입소일과 퇴소일 가져오기
          const admissionDate = row[7] || ""; // 입소일
          const dischargeDate = row[8] || "99991231"; // 퇴소일 (없으면 매우 먼 미래 날짜)

          // 숫자로 변환 (스프레드시트 데이터는 모두 yyyymmdd 형식)
          const admDateNum = parseInt(admissionDate) || 0;
          const dischargeDateNum = parseInt(dischargeDate) || 99991231;
          const refDateNum = parseInt(formattedRefDate) || 0;
          
          console.log(`직원: ${row[2]}, 직원번호: ${row[1]}, 입소일: ${admissionDate}(${admDateNum}), 퇴소일: ${dischargeDate}(${dischargeDateNum}), 기준일: ${formattedRefDate}(${refDateNum})`);
          
          // 기준일이 입소일과 퇴소일 사이에 있는지 확인
          return refDateNum >= admDateNum && refDateNum <= dischargeDateNum;
        });

        // 직원번호(employeeId) 순으로 정렬
        const sortedemployees = [...currentemployees].sort((a, b) => {
          const employeeIdA = a[1] || ""; // 배열[1]은 직원번호
          const employeeIdB = b[1] || "";
          return employeeIdA.localeCompare(employeeIdB);
        });

        console.log(`table_Currentemployee: 기준일 ${formattedRefDate}에 표시할 정렬된 직원 수: ${sortedemployees.length}`);

        // 정렬된 데이터를 테이블에 추가
        sortedemployees.forEach((row) => {
          const employeeNo = row[1]; // 배열[1]열 - 직원번호
          const employeeName = row[2]; // 배열[2]열 - 직원명
          const mobile = row[10]; // 배열[10]열 - 휴대전화번호
          const birthdate = row[5]; // 배열[5]열 - 생년월일
          const admissionDate = row[7]; // 배열[7]열 - 입소일
          const dischargeDate = row[8]; // 배열[8]열 - 퇴소일
          
          // 새로운 행 생성
          const newRow = document.createElement("tr");
          // 행에 셀 추가
          newRow.innerHTML = `
            <td>${employeeNo}</td>
            <td>${employeeName}</td>
            <td>${mobile}</td>
            <td>${birthdate}</td>
            <td>${admissionDate}</td>
            <td>${dischargeDate}</td>
          `;

          // 테이블에 행 추가
          tableBody.appendChild(newRow);

          // 행 더블클릭 이벤트 추가
          newRow.addEventListener("dblclick", function () {
            // 선택된 행 하이라이트 처리
            const allRows = tableBody.querySelectorAll("tr");
            allRows.forEach((r) => r.classList.remove("selected-row"));
            newRow.classList.add("selected-row");

            // 수정 버튼과 삭제 버튼 활성화, 입력 버튼 비활성화
            document.getElementById("editBtn").disabled = false;
            document.getElementById("deleteBtn").disabled = false;
            document.getElementById("submitBtn").disabled = true;

            // 데이터를 각 탭에 표시
            fillemployeeData(row);
          });
        });
        
        console.log("table_Currentemployee: 테이블 업데이트 완료");
      }

      // (구분)직원 데이터 이동 함수 정의
      function move_employeeLineData() {
        // Promise를 반환하도록 구현
        return new Promise((resolve, reject) => {
          // 직원등록_ID 사용
          const employeeId = selectedemployeeId;

          if (!employeeId) {
            showAlert("직원등록_ID가 없습니다. 직원을 먼저 선택해주세요.");
            reject("직원등록_ID가 없습니다.");
            return;
          }

          // 직원 데이터 이동 요청
          move_employeeLine(employeeId)
            .then(function (result) {
              if (result.success) {
                resolve(result);
              } else {
                showAlert(result.message);
                reject(result.message);
              }
            })
            .catch(function (error) {
              showAlert("직원 데이터 이동 중 오류가 발생했습니다: " + error);
              reject(error);
            });
        });
      }

      // 폼 유효성 검사 함수
      function validateForm() {
        const currentemployeeId = document.getElementById("employeeId").value;
        
        if (currentemployeeId === "상담직원") {
          // 상담직원인 경우만 간단한 유효성 검사
          const name = document.getElementById("name").value;
          const mobile = document.getElementById("mobile").value;
          const ssn = document.getElementById("ssn").value;

          if (!name || !mobile || !ssn) {
            const missingFields = [];
            if (!name) missingFields.push("이름");
            if (!mobile) missingFields.push("연락처");
            if (!ssn) missingFields.push("주민등록번호");
            showAlert(`다음 항목을 입력해주세요: ${missingFields.join(", ")}`);
            return false;
          }
          return true;
        } else {
          // 신규직원등록중, 신규직원전환중, 일반 직원 모두 기존 유효성 검사 실행
          const validationResult = EntryCheck();
          if (!validationResult.isValid) {
            const missingFieldsText = validationResult.missingFields.join(", ");
            showAlert(`다음 항목을 입력해주세요: ${missingFieldsText}`);
            return false;
          }
          return true;
        }
      }

    </script>
  </body>
</html>
